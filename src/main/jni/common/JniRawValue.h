#ifndef JNIRAWVALUE_H
#define JNIRAWVALUE_H

#include <iostream>
#include <boost/lexical_cast.hpp>
#include <string>
#include <JniException.h>

using std::string;

typedef uint64_t JniRawValue;

template <typename T>
const string ConvertToString(JniRawValue raw_value) {
    T value;
    memcpy(&value, &raw_value, sizeof(T));
    return std::to_string(value);
}

template <typename T>
const T ConvertToNative(JniRawValue raw_value) {
    T value;
    memcpy(&value, &raw_value, sizeof(T));
    return value;
}

template <typename T>
const JniRawValue ConvertToJniRawValue(const string value_string) {
    JniRawValue jniRawValue;
    T val = boost::lexical_cast<T>(value_string);
    memcpy(&jniRawValue, &val, sizeof(val));
    return jniRawValue;
}

template <typename T>
JniRawValue ConvertNativeToJniRawValue(const T val) {
    JniRawValue jniRawValue;
    memcpy(&jniRawValue, &val, sizeof(val));
    return jniRawValue;
}

inline string ConvertPointerToString(JniRawValue raw_value) {
    if (raw_value == 0) {
        return std::string("0x0");
    }

    char buffer[64];
    sprintf(buffer, "%p", (void*) raw_value);
    return std::string(buffer);
}

inline string ConvertPointerToString(void* pointer) {
    if (pointer == nullptr) {
        return std::string("0x0");
    }
    char buffer[64];
    sprintf(buffer, "%p", (void*) pointer);
    return std::string(buffer);
}

/**
 * As sizeof is only know at compile at, we have to use template, generated by compiler, for checking
 * data structure size.
 */
template <typename T, typename B>
int isTheSameSize() {
    return (sizeof(T) == sizeof(B));
}

inline void* ConvertToNativePointer(string stringPointer) {
    if (isTheSameSize<unsigned long long, void*>()) {
        return (void*) std::stoull(stringPointer, 0, 16);
    } else if (isTheSameSize<unsigned long, void*>()) {
        return (void*) std::stoul(stringPointer, 0, 16);
    } else if (isTheSameSize<unsigned int, void*>()) {
        // no std::stou
        return (void *) std::stoul(stringPointer, 0, 16);
    } else {
        throw JniException("Failed to find pointer data size.");
    }
}

inline JniRawValue ConvertToJniRawValueAsNativePointer(string stringPointer) {
    return (JniRawValue ) ConvertToNativePointer(stringPointer);
}

inline void* ConvertToNativePointer(JniRawValue raw_value) {
    void* nativePointer = (void*) raw_value;
    return nativePointer;
}



#endif // JNIRAWVALUE_H
